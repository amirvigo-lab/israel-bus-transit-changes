<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ניתוח נתוני תחבורה ציבורית</title>
    <!-- Importing Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Importing Chart.js for charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Importing Chart.js annotation plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/2.2.1/chartjs-plugin-annotation.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Assistant:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Assistant', sans-serif;
        }
        #loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 md:p-8">
        
        <header class="mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-blue-800">ניתוח שינויים בתחבורה ציבורית לאורך זמן</h1>
            <p class="text-base text-gray-600 leading-relaxed mt-2">אתר זה עוקב אחר פרסומים על שינויים בקווי התחבורה הציבורית, ומספק את המידע על היקף התיקופים השבועי הממוצע בתקופות שגרה בקווים שהופיעו בפרסום לציבור ולעיתים בקווים נוספים המושפעים מהשינוי.<br>המידע מתעדכן 3 פעמים בשנה (בהתאם לתקופות השגרה ברבעונים 1,2,4 המשמשים גם את הבסיס ל<a href="https://markav.net/page/6/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">תקופות המדידה של אתר "מר-קו"</a>).</p>
            <div class="mt-4 text-base text-gray-600 leading-relaxed">
                <p>לאתר שתי מטרות עיקריות:</p>
                <ul class="list-disc list-inside mt-2 space-y-1">
                    <li>שימור הזכרון הארגוני לגבי שינויים שנעשו בקווים והסיבה להם (למידע מפורט על מהות השינוי ניתן להמשיך את הבדיקה באתר היסטוריית הGTFS "<a href="https://gtfs.mpayer.co.il/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">הקו המשווה</a>").</li>
                    <li>בחינה של ההשפעה ההדדית של השינויים בקווי אוטובוס על קווים אחרים לאורך זמן.</li>
                </ul>
            </div>
        </header>

        <!-- Search Bar -->
        <div class="mb-8 relative">
            <input type="text" id="search-input" placeholder="חיפוש קבוצה (לדוגמה: אשדוד, עכו פנימי...)" class="w-full p-3 pr-10 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                </svg>
            </div>
            <div id="search-results" class="absolute z-10 w-full bg-white border border-gray-300 rounded-md mt-1 hidden shadow-lg max-h-60 overflow-y-auto">
                <!-- Search results will be populated here -->
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loading-container" class="text-center py-10">
            <div id="loader" class="mx-auto"></div>
            <p class="mt-4 text-gray-600">טוען נתונים...</p>
        </div>
        
        <div id="app-container" class="hidden">
            <!-- Navigation Tabs for Districts -->
            <nav class="mb-4">
                 <h3 class="text-sm font-bold text-gray-500 uppercase tracking-wide mb-2">1. בחר מחוז</h3>
                <div id="district-tabs-container" class="flex flex-wrap gap-2">
                    <!-- District tabs will be dynamically inserted here -->
                </div>
            </nav>
    
            <!-- Navigation Tabs for Groups -->
            <nav class="mb-6">
                <h3 class="text-sm font-bold text-gray-500 uppercase tracking-wide mb-2">2. בחר קבוצה</h3>
                <div id="tabs-container" class="flex flex-col gap-2">
                    <!-- Group tabs will be dynamically inserted here -->
                </div>
            </nav>
    
            <!-- Main Content Card -->
            <main id="main-content" class="bg-white p-6 rounded-lg shadow-lg hidden">
    
                <!-- Group Information Section -->
                <div class="mb-6 pb-6 border-b border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-800 ml-4" id="groupTitle"></h2>
                </div>
    
                <!-- Change Info Section -->
                <div id="changeInfoContainer" class="hidden">
                    <!-- Change info boxes will be dynamically inserted here -->
                </div>
    
                <!-- Chart Section -->
                <div class="mt-8">
                    <h3 class="text-xl font-semibold mb-4">ממוצע תיקופים שבועי</h3>
                    <div class="bg-gray-50 p-4 rounded-lg">
                       <div class="flex justify-center space-x-2 space-x-reverse mb-4">
                            <button id="selectAllBtn" class="px-3 py-1 bg-blue-500 text-white rounded-md text-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">בחר הכל</button>
                            <button id="clearAllBtn" class="px-3 py-1 bg-gray-500 text-white rounded-md text-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">נקה הכל</button>
                       </div>
                       <!-- Custom Legend Container -->
                       <div id="custom-legend-container" class="mb-4 border-b pb-4"></div>
                       <div class="relative h-96">
                           <canvas id="ridershipChart"></canvas>
                       </div>
                       <div class="mt-4 pt-4 border-t border-gray-200 flex justify-between items-center">
                           <div class="font-bold">
                               <span class="text-gray-700">היקף השינוי (Q1 2018 - Q2 2025):</span>
                               <span id="ridershipChange" class="text-lg"></span>
                           </div>
                           <button id="exportCsvBtn" class="px-3 py-1 bg-green-600 text-white rounded-md text-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                </svg>
                               ייצוא ל-CSV
                           </button>
                       </div>
                    </div>
                </div>
    
                <!-- Kilometer Data Table Section -->
                <div class="mt-8">
                    <h3 class="text-xl font-semibold mb-4">סיכום נתוני קילומטראז' (ק"מ שבועי)</h3>
                    <p class="text-sm text-gray-500 -mt-3 mb-4">משתנה בהתאם לקווים שנבחרו בגרף</p>
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="py-3 px-4 border-b text-right font-bold text-gray-600">שנה</th>
                                    <th class="py-3 px-4 border-b text-right font-bold text-gray-600">רבעון</th>
                                    <th class="py-3 px-4 border-b text-right font-bold text-gray-600">סה"כ ק"מ שבועי בקבוצה</th>
                                </tr>
                            </thead>
                            <tbody id="kmDataTableBody">
                                <!-- Data rows will be inserted here by JavaScript -->
                            </tbody>
                            <!-- Footer for summary will be inserted here -->
                        </table>
                    </div>
                </div>
                
                <!-- Ratio Summary -->
                <div id="ratioSummarySection" class="mt-8 hidden">
                    <div class="bg-indigo-50 p-4 rounded-lg text-center">
                        <p id="ratioSummaryText" class="text-lg font-semibold text-indigo-800"></p>
                    </div>
                </div>
    
            </main>
        </div>
        
    </div>

    <script>
        // --- Static Data ---
        const ALL_DISTRICTS = [
            "גוש דן", "י-ם", "גולן גליל ועמקים", "מטרופולין חיפה",
            "הדרום", "מרכז", "יו\"ש", "בין מחוזי"
        ];

        // --- Application State ---
        let transportData = [];
        let groupChangeInfo = [];
        let dataMap = {};
        let currentChart = null;
        let searchTimeout = null;
        

        // --- Data Processing Function ---
        function processRawData(data) {
            return data.map(item => {
                if (!item || typeof item["קו"] !== 'string' || !item["מחוז"] || !item["שם קבוצה"]) {
                    console.warn('Skipping invalid item in rawData (missing essential properties):', item);
                    return null; 
                }
                const makat = item["מקט"] || item["מק\"ט"];
                const lineNumMatch = item["קו"].match(/(\d+)/);
                const lineNumber = lineNumMatch ? lineNumMatch[0] : item["קו"];
                const processed = {
                    id: `line-${makat}`,
                    lineNumber: lineNumber,
                    lineName: item["קו"],
                    district: item["מחוז"],
                    groupName: item["שם קבוצה"],
                    ridershipData: [],
                    kilometerData: []
                };
                for (const key in item) {
                    const ridershipMatch = key.match(/^(?:(\d{2})\/(Q\d)|(Q\d)\/(\d{2}))$/);
                    if (ridershipMatch) {
                        const passengers = Math.round(parseFloat(item[key]));
                        if (!isNaN(passengers) && passengers > 0) {
                            const year = ridershipMatch[1] || ridershipMatch[4];
                            const quarter = ridershipMatch[2] || ridershipMatch[3];
                            processed.ridershipData.push({ year: 2000 + parseInt(year), quarter: quarter, weeklyAvgPassengers: passengers });
                        }
                        continue;
                    }
                    const kmMatch = key.match(/ק(?:\"|\s)?מ\s*שבועי\s*(Q\d)\s*(\d{4})/);
                    if (kmMatch) {
                        const weeklyKm = parseInt(String(item[key]).replace(/,/g, ''));
                        if (!isNaN(weeklyKm)) {
                             const quarter = kmMatch[1];
                             const year = kmMatch[2];
                             processed.kilometerData.push({ year: parseInt(year), quarter: quarter, weeklyKm: weeklyKm });
                        }
                    }
                }
                processed.ridershipData.sort((a, b) => a.year - b.year || a.quarter.localeCompare(b.quarter));
                processed.kilometerData.sort((a, b) => a.year - b.year || a.quarter.localeCompare(b.quarter));
                return processed;
            }).filter(Boolean);
        }

        // --- Main Render Function ---
        function renderGroupData(groupName) {
            const mainContent = document.getElementById('main-content');
            
            if (!groupName) {
                mainContent.classList.add('hidden');
                return;
            }

            const groupData = transportData.filter(line => line.groupName === groupName);
            if (groupData.length === 0) {
                 mainContent.classList.add('hidden');
                 return;
            };
            mainContent.classList.remove('hidden');

            const groupInfo = groupData[0];
            document.getElementById('groupTitle').textContent = `ניתוח קבוצת ${groupInfo.groupName}`;
            
            const changeInfos = groupChangeInfo.filter(info => info["קיטלוג"] === groupName);
            const changeInfoContainer = document.getElementById('changeInfoContainer');
            changeInfoContainer.innerHTML = ''; 
            
            if (changeInfos.length > 0) {
                changeInfoContainer.classList.remove('hidden');

                changeInfos.sort((a, b) => {
                    const [dayA, monthA, yearA] = a["תאריך פעימה"].split('.').map(Number);
                    const [dayB, monthB, yearB] = b["תאריך פעימה"].split('.').map(Number);
                    const dateA = new Date(yearA, monthA - 1, dayA);
                    const dateB = new Date(yearB, monthB - 1, dayB);
                    return dateA - dateB;
                });
                
                const title = document.createElement('h3');
                title.className = "text-xl font-bold text-amber-800 mb-2";
                title.textContent = "שינויים מרכזיים בקבוצה";
                changeInfoContainer.appendChild(title);

                changeInfos.forEach((changeInfo, index) => {
                    const infoBox = document.createElement('div');
                    infoBox.className = "mb-4 p-4 bg-amber-50 border-r-4 border-amber-400 rounded-r-lg";
                     if (index > 0) {
                        infoBox.classList.add("mt-4", "pt-4", "border-t", "border-amber-200");
                    }

                    let linkHtml = '';
                    const publicationUrl = changeInfo["קישור לפרסום"];
                    if (publicationUrl && publicationUrl.trim() !== '') {
                        linkHtml = `<a href="${publicationUrl}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline font-semibold">קישור לפרסום</a>`;
                    }
                    
                    let focusButtonHtml = '';
                    const focusGroupName = changeInfo["התמקדות בקבוצה"];
                    if (focusGroupName && focusGroupName.trim() !== '') {
                        focusButtonHtml = `<button onclick="navigateToGroup('${focusGroupName}')" class="text-blue-600 hover:underline font-semibold">${focusGroupName}</button>`;
                    }
            
                    const prefilledFormUrlTemplate = "https://docs.google.com/forms/d/e/1FAIpQLSdIaw-Az5kpJ6XGFzDkzz-MpsVAA0ZRz1eSdkHYGa-RVJRyGg/viewform?usp=pp_url&entry.1025341531=GROUP_NAME_PLACEHOLDER";
                    const finalFormUrl = prefilledFormUrlTemplate.replace("GROUP_NAME_PLACEHOLDER", encodeURIComponent(groupName));
            
                    const suggestButtonHtml = `<a href="${finalFormUrl}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline font-semibold">הוסף/חדד מידע</a>`;

                    infoBox.innerHTML = `
                        <p class="text-gray-700"><strong class="font-semibold">תאריך השינוי:</strong> ${changeInfo["תאריך פעימה"]}</p>
                        <p class="text-gray-700 mt-1"><strong class="font-semibold">תיאור השינוי:</strong> ${changeInfo["תיאור"]}</p>
                        <div class="flex justify-between items-center mt-2">
                           <div class="flex items-center space-x-4 space-x-reverse">
                                ${linkHtml}
                                ${focusButtonHtml}
                           </div>
                           ${suggestButtonHtml}
                        </div>
                    `;
                    changeInfoContainer.appendChild(infoBox);
                });
            } else {
                changeInfoContainer.classList.add('hidden');
            }
            
            const changeQuarters = changeInfos.map(info => info["הרבעון שבו בוצע עיקר השינוי"]);
            
            populateKmTable(groupData);
            createStackedAreaChart(groupData, changeQuarters);
            displayRidershipSummary(groupData);
            displayRatioSummary(groupData);
        }
        
        function navigateToGroup(groupName) {
            const targetGroup = transportData.find(line => line.groupName === groupName);
            if (!targetGroup) {
                console.warn(`Could not find group to navigate to: ${groupName}`);
                return;
            }

            const targetDistrict = targetGroup.district;
            
            const districtButton = Array.from(document.querySelectorAll('#district-tabs-container button')).find(btn => btn.textContent === targetDistrict);
            
            if (districtButton) {
                districtButton.click();
                
                setTimeout(() => {
                    const groupButton = Array.from(document.querySelectorAll('#tabs-container button')).find(btn => btn.textContent === groupName);
                    if (groupButton) {
                        groupButton.click();
                    } else {
                        console.warn(`Could not find group button for: ${groupName} after switching district`);
                    }
                }, 50);
            } else {
                console.warn(`Could not find district button for: ${targetDistrict}`);
            }
        }

        // --- UI Population Functions ---
        function populateKmTable(data) {
            const kmTableBody = document.getElementById('kmDataTableBody');
            kmTableBody.innerHTML = '';
            const kmSummary = {};
            data.forEach(line => {
                line.kilometerData.forEach(dp => {
                    const key = `${dp.year}-${dp.quarter}`;
                    kmSummary[key] = (kmSummary[key] || 0) + dp.weeklyKm;
                });
            });
            const sortedKeys = Object.keys(kmSummary).sort((a,b) => {
                 const [yA, qA] = a.split('-'); const [yB, qB] = b.split('-');
                 return yA - yB || qA.localeCompare(qB);
            });
            sortedKeys.forEach(key => {
                const [year, quarter] = key.split('-');
                const totalKm = kmSummary[key];
                const row = kmTableBody.insertRow();
                row.className = 'hover:bg-gray-50';
                row.innerHTML = `<td class="py-3 px-4 border-b">${year}</td><td class="py-3 px-4 border-b">${quarter}</td><td class="py-3 px-4 border-b font-semibold">${totalKm.toLocaleString()}</td>`;
            });
            
            const startValue = kmSummary['2018-Q4'];
            const endValue = kmSummary['2025-Q2'];
            const kmTable = kmTableBody.parentElement;
            const existingTfoot = kmTable.querySelector('tfoot');
            if (existingTfoot) existingTfoot.remove();

            if (startValue !== undefined && endValue !== undefined && startValue > 0) {
                const absoluteChange = endValue - startValue;
                const change = (absoluteChange / startValue) * 100;
                const sign = absoluteChange >= 0 ? '+' : '';
                const footerText = `${sign}${absoluteChange.toLocaleString()} (${sign}${change.toFixed(1)}%)`;
                const tfoot = kmTable.createTFoot();
                const footerRow = tfoot.insertRow();
                footerRow.className = 'bg-gray-100 font-bold';
                footerRow.innerHTML = `<td colspan="2" class="py-3 px-4 text-right">היקף השינוי (Q4 2018 - Q2 2025)</td><td class="py-3 px-4 text-left ${change >= 0 ? 'text-green-600' : 'text-red-600'}">${footerText}</td>`;
            }
        }

        function displayRidershipSummary(data) {
            let startValueTotal = 0, endValueTotal = 0;
            data.forEach(line => {
                const startDP = line.ridershipData.find(dp => dp.year === 2018 && dp.quarter === 'Q1');
                if (startDP) startValueTotal += startDP.weeklyAvgPassengers;
                const endDP = line.ridershipData.find(dp => dp.year === 2025 && dp.quarter === 'Q2');
                if (endDP) endValueTotal += endDP.weeklyAvgPassengers;
            });

            const summaryEl = document.getElementById('ridershipChange');
            if(data.length === 0) {
                 summaryEl.textContent = 'N/A';
                 summaryEl.className = 'text-lg font-bold text-gray-500';
                 return;
            }

            if (startValueTotal > 0) {
                const absoluteChange = endValueTotal - startValueTotal;
                const change = (absoluteChange / startValueTotal) * 100;
                const sign = absoluteChange >= 0 ? '+' : '';
                summaryEl.textContent = `${sign}${absoluteChange.toLocaleString()} (${sign}${change.toFixed(1)}%)`;
                summaryEl.className = `text-lg font-bold ${change >= 0 ? 'text-green-600' : 'text-red-600'}`;
            } else {
                 if (endValueTotal > 0) {
                    summaryEl.textContent = 'קווים חדשים';
                    summaryEl.className = 'text-lg font-bold text-blue-600';
                 } else {
                    summaryEl.textContent = 'N/A';
                    summaryEl.className = 'text-lg font-bold text-gray-500';
                 }
            }
        }

        function displayRatioSummary(data) {
            const ratioTextEl = document.getElementById('ratioSummaryText');
            const ratioSectionEl = document.getElementById('ratioSummarySection');

            if(data.length === 0) {
                ratioSectionEl.classList.add('hidden');
                return;
            }

            let startRidershipTotal = 0, endRidershipTotal = 0, hasStartRidership = false;
            data.forEach(line => {
                const startDP = line.ridershipData.find(dp => dp.year === 2018 && dp.quarter === 'Q1');
                if (startDP) {
                    startRidershipTotal += startDP.weeklyAvgPassengers;
                    hasStartRidership = true;
                }
                const endDP = line.ridershipData.find(dp => dp.year === 2025 && dp.quarter === 'Q2');
                if (endDP) endRidershipTotal += endDP.weeklyAvgPassengers;
            });
            
            if (!hasStartRidership && endRidershipTotal === 0) {
                ratioSectionEl.classList.add('hidden');
                return;
            }
            const ridershipChange = endRidershipTotal - startRidershipTotal;

            const kmSummary = {};
            data.forEach(line => {
                line.kilometerData.forEach(dp => {
                    const key = `${dp.year}-${dp.quarter}`;
                    kmSummary[key] = (kmSummary[key] || 0) + dp.weeklyKm;
                });
            });
            const startKmTotal = kmSummary['2018-Q4'];
            const endKmTotal = kmSummary['2025-Q2'];

            if (startKmTotal === undefined || endKmTotal === undefined) {
                ratioSectionEl.classList.add('hidden');
                return;
            }

            const kmChange = endKmTotal - startKmTotal;
            ratioSectionEl.classList.remove('hidden');

            if (kmChange === 0) {
                ratioTextEl.textContent = "לא חל שינוי בהיקף הקילומטראז', ולכן לא ניתן לחשב יחס.";
                return;
            }

            const ratio = ridershipChange / kmChange;
            let kmText = kmChange > 0 ? "שהוסף" : "שנגרע";
            let passengerText = ridershipChange >= 0 ? "נוספו" : "נגרעו";
            let passengerValue = Math.abs(ratio).toFixed(1);
            ratioTextEl.textContent = `על כל ק"מ ${kmText} בתקופה הנבחנת, ${passengerText} ${passengerValue} נוסעים.`;
        }
        
        function populateCustomLegend(chart, lastLabel, groupData) {
            const legendContainer = document.getElementById('custom-legend-container');
            legendContainer.innerHTML = '';
            const lastLabelIndex = chart.data.labels.indexOf(lastLabel);

            const legendItemsData = chart.data.datasets.map((dataset, index) => ({
                dataset,
                index
            })).sort((a, b) => a.dataset.lineNumber - b.dataset.lineNumber);

            const activeItems = [];
            const cancelledItems = [];

            legendItemsData.forEach(({ dataset, index }) => {
                const isCancelled = lastLabelIndex === -1 || !dataset.data[lastLabelIndex];
                
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center cursor-pointer p-1 rounded-md';
                
                const colorBox = document.createElement('span');
                colorBox.className = 'w-4 h-4 mr-2 ml-1 rounded flex items-center justify-center';
                colorBox.style.backgroundColor = dataset.borderColor;
                
                const checkmark = document.createElement('span');
                checkmark.innerHTML = '&#10003;'; // Checkmark symbol
                checkmark.className = 'text-white text-xs font-bold';

                colorBox.appendChild(checkmark);
                
                const textContainer = document.createElement('span');
                textContainer.className = 'text-sm text-gray-700';

                const labelText = dataset.label;
                const makat = dataset.makat;
                const match = labelText.match(/(.*)(\(\s*\d+\s*\))$/);

                if (match && makat) {
                    const lineNamePart = match[1];
                    const makatPart = match[2];
                    textContainer.appendChild(document.createTextNode(lineNamePart));
                    const link = document.createElement('a');
                    link.href = `https://markav.net/line/${makat}/`;
                    link.textContent = makatPart;
                    link.target = '_blank';
                    link.rel = 'noopener noreferrer';
                    link.className = 'text-blue-600 hover:underline';
                    link.onclick = (e) => e.stopPropagation();
                    textContainer.appendChild(link);
                } else {
                    textContainer.innerText = labelText;
                }
                
                if (!chart.isDatasetVisible(index)) {
                    legendItem.classList.add('opacity-50');
                    textContainer.classList.add('line-through');
                    checkmark.style.display = 'none';
                }

                legendItem.appendChild(colorBox);
                legendItem.appendChild(textContainer);

                legendItem.onclick = () => {
                    const isVisible = chart.isDatasetVisible(index);
                    chart.setDatasetVisibility(index, !isVisible);
                    chart.update();

                    const visibleLineNames = chart.data.datasets
                        .filter((ds, i) => chart.isDatasetVisible(i))
                        .map(ds => ds.label);

                    const filteredData = groupData.filter(line => visibleLineNames.includes(line.lineName));
                    
                    displayRidershipSummary(filteredData);
                    populateKmTable(filteredData);
                    displayRatioSummary(filteredData);

                    populateCustomLegend(chart, lastLabel, groupData);
                };
                
                if(isCancelled) {
                    cancelledItems.push(legendItem);
                } else {
                    activeItems.push(legendItem);
                }
            });

            const activeItemsContainer = document.createElement('div');
            activeItemsContainer.className = 'w-full flex flex-wrap justify-center gap-x-4 gap-y-2';
            
            if (activeItems.length > 0) {
                const activeTitle = document.createElement('h4');
                activeTitle.className = 'w-full text-center text-sm font-bold text-gray-600 mt-2 mb-2';
                activeTitle.textContent = 'קווים פעילים';
                legendContainer.appendChild(activeTitle);
                activeItems.forEach(item => activeItemsContainer.appendChild(item));
                legendContainer.appendChild(activeItemsContainer);
            }


            if (cancelledItems.length > 0) {
                const cancelledItemsContainer = document.createElement('div');
                cancelledItemsContainer.className = 'w-full flex flex-wrap justify-center gap-x-4 gap-y-2';

                const cancelledTitle = document.createElement('h4');
                cancelledTitle.className = 'w-full text-center text-sm font-bold text-gray-600 mt-4 mb-2';
                cancelledTitle.textContent = 'קווים לא פעילים';
                legendContainer.appendChild(cancelledTitle);
                cancelledItems.forEach(item => cancelledItemsContainer.appendChild(item));
                legendContainer.appendChild(cancelledItemsContainer);

            }
        }


        function createStackedAreaChart(data, changeQuarters) {
            const ctx = document.getElementById('ridershipChart').getContext('2d');
            if (currentChart) currentChart.destroy();

            const allLabelsSet = new Set();
            data.forEach(line => line.ridershipData.forEach(dp => allLabelsSet.add(`${dp.quarter}/${dp.year.toString().slice(-2)}`)));
            const sortedLabels = Array.from(allLabelsSet).sort((a, b) => {
                const [qA, yA] = a.split('/'); const [qB, yB] = b.split('/');
                return yA - yB || qA.localeCompare(qB);
            });

            const colors = [
                { border: 'rgb(59, 130, 246)', bg: 'rgba(59, 130, 246, 0.5)' }, { border: 'rgb(239, 68, 68)', bg: 'rgba(239, 68, 68, 0.5)' },
                { border: 'rgb(16, 185, 129)', bg: 'rgba(16, 185, 129, 0.5)' }, { border: 'rgb(249, 115, 22)', bg: 'rgba(249, 115, 22, 0.5)' },
                { border: 'rgb(139, 92, 246)', bg: 'rgba(139, 92, 246, 0.5)' }, { border: 'rgb(236, 72, 153)', bg: 'rgba(236, 72, 153, 0.5)' },
                { border: 'rgb(217, 119, 6)', bg: 'rgba(217, 119, 6, 0.5)' }, { border: 'rgb(74, 222, 128)', bg: 'rgba(74, 222, 128, 0.5)' },
                { border: 'rgb(99, 102, 241)', bg: 'rgba(99, 102, 241, 0.5)' }, { border: 'rgb(244, 63, 94)', bg: 'rgba(244, 63, 94, 0.5)' },
                { border: 'rgb(8, 145, 178)', bg: 'rgba(8, 145, 178, 0.5)' }, { border: 'rgb(219, 39, 119)', bg: 'rgba(219, 39, 119, 0.5)' },
                { border: 'rgb(107, 114, 128)', bg: 'rgba(107, 114, 128, 0.5)' }, { border: 'rgb(251, 146, 60)', bg: 'rgba(251, 146, 60, 0.5)' },
            ];
            const datasets = data.map((line, index) => {
                const dataMap = new Map(line.ridershipData.map(dp => [`${dp.quarter}/${dp.year.toString().slice(-2)}`, dp.weeklyAvgPassengers]));
                const chartData = sortedLabels.map(label => dataMap.get(label) || 0);
                const makat = line.id.replace('line-', '');
                return {
                    label: line.lineName,
                    lineNumber: parseInt(line.lineNumber, 10),
                    makat: makat,
                    data: chartData,
                    fill: true,
                    borderColor: colors[index % colors.length].border,
                    backgroundColor: colors[index % colors.length].bg,
                    tension: 0.1,
                };
            }).sort((a, b) => a.lineNumber - b.lineNumber);
            
            const annotations = {};
            
            const coronaIndex = sortedLabels.indexOf('Q2/20');
            if (coronaIndex !== -1) {
                annotations.coronaLine = {
                    type: 'line',
                    xMin: coronaIndex,
                    xMax: coronaIndex,
                    borderColor: 'transparent',
                    borderWidth: 0,
                    label: {
                        content: 'קורונה',
                        display: true,
                        position: 'center',
                        yAdjust: 0,
                        backgroundColor: 'rgba(75, 85, 99, 0.8)', // gray-600
                        font: { family: 'Assistant', weight: 'bold', size: 10 },
                        padding: 4,
                        borderRadius: 4,
                        rotation: -90
                    }
                };
            }

            const warIndex = sortedLabels.indexOf('Q4/23');
            if (warIndex !== -1) {
                annotations.warLine = {
                    type: 'line',
                    xMin: warIndex,
                    xMax: warIndex,
                    borderColor: 'transparent',
                    borderWidth: 0,
                    label: {
                        content: 'מלחמת 7.10',
                        display: true,
                        position: 'center',
                        yAdjust: 0,
                        backgroundColor: 'rgba(75, 85, 99, 0.8)', // gray-600
                        font: { family: 'Assistant', weight: 'bold', size: 10 },
                        padding: 4,
                        borderRadius: 4,
                        rotation: -90
                    }
                };
            }

            if (changeQuarters && changeQuarters.length > 0) {
                 changeQuarters.forEach((changeQuarter, index) => {
                    const changeIndex = sortedLabels.indexOf(changeQuarter);
                    if (changeIndex !== -1) {
                        annotations[`changeLine${index}`] = {
                            type: 'line',
                            xMin: changeIndex,
                            xMax: changeIndex,
                            borderColor: 'rgb(239, 68, 68)',
                            borderWidth: 2,
                            borderDash: [6, 6],
                            label: {
                                content: 'שינוי מרכזי', 
                                display: true, 
                                position: 'start',
                                backgroundColor: 'rgba(239, 68, 68, 0.8)', 
                                font: { family: 'Assistant', weight: 'bold' }
                            }
                        };
                    }
                 });
            }
            
            currentChart = new Chart(ctx, {
                type: 'line', data: { labels: sortedLabels, datasets: datasets },
                options: {
                    responsive: true, maintainAspectRatio: false, interaction: { mode: 'index', intersect: false },
                    scales: { y: { stacked: true, beginAtZero: true, ticks: { callback: value => value.toLocaleString() } } },
                    plugins: { 
                        legend: {
                           display: false
                        },
                        tooltip: { callbacks: { label: context => `${context.dataset.label}: ${context.parsed.y.toLocaleString()}` } },
                        annotation: { annotations: annotations }
                    }
                }
            });
            const lastLabel = sortedLabels.length > 0 ? sortedLabels[sortedLabels.length - 1] : null;
            populateCustomLegend(currentChart, lastLabel, data);
        }
        
        function setupGroupTabs(groupsForDistrict) {
            const tabsContainer = document.getElementById('tabs-container');
            tabsContainer.innerHTML = '';
            
            if (!groupsForDistrict || groupsForDistrict.length === 0) {
                 tabsContainer.innerHTML = '<p class="p-4 text-gray-500">לא נמצאו קבוצות נתונים עבור מחוז זה.</p>';
                 renderGroupData(null);
                 return;
            };

            const datedGroups = {};
            const undatedGroups = [];

            groupsForDistrict.forEach(name => {
                const match = name.match(/(\d{2}\.\d{2}\.\d{4})$/);
                if (match) {
                    const year = match[1].split('.')[2];
                    if (!datedGroups[year]) {
                        datedGroups[year] = [];
                    }
                    datedGroups[year].push(name);
                } else {
                    undatedGroups.push(name);
                }
            });

            const sortedYears = Object.keys(datedGroups).sort((a,b) => b - a); // Sort years descending

            sortedYears.forEach(year => {
                const yearSectionContainer = document.createElement('div');
                yearSectionContainer.className = 'w-full flex flex-wrap items-center gap-2 mt-2';
                tabsContainer.appendChild(yearSectionContainer);

                const title = document.createElement('h4');
                title.className = 'text-base font-bold text-gray-700 mr-2';
                title.textContent = year;
                yearSectionContainer.appendChild(title);

                datedGroups[year].sort().forEach(name => {
                    const button = createGroupButton(name);
                    yearSectionContainer.appendChild(button);
                });
            });

            if (undatedGroups.length > 0) {
                const undatedContainer = document.createElement('div');
                undatedContainer.className = 'w-full mt-4 pt-4 border-t border-gray-200';
                tabsContainer.appendChild(undatedContainer);

                const title = document.createElement('h4');
                title.className = 'text-base font-bold text-gray-700 mb-2';
                title.textContent = 'קבוצות בהם לא בוצעו שינויים משמעותיים בתקופה הנבחנת';
                undatedContainer.appendChild(title);
                
                const buttonContainer = document.createElement('div');
                buttonContainer.className = 'flex flex-wrap gap-2';
                undatedContainer.appendChild(buttonContainer);

                undatedGroups.sort().forEach(name => {
                    const button = createGroupButton(name);
                    buttonContainer.appendChild(button);
                });
            }

            // Click the first available button
            const firstButton = tabsContainer.querySelector('button');
            if(firstButton) {
                firstButton.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                firstButton.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
                renderGroupData(firstButton.textContent);
            }
        }

        function createGroupButton(name) {
            const button = document.createElement('button');
            button.textContent = name;
            button.className = `py-2 px-4 rounded-md font-semibold border focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150 bg-white text-gray-700 border-gray-300 hover:bg-gray-100`;
            
            button.addEventListener('click', () => {
                document.querySelectorAll('#tabs-container button').forEach(btn => {
                    btn.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
                    btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                });
                
                button.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                button.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
                
                renderGroupData(name);
            });
            return button;
        }

        function setupDistrictTabs() {
            const districtTabsContainer = document.getElementById('district-tabs-container');
            districtTabsContainer.innerHTML = ''; 

            ALL_DISTRICTS.forEach(name => {
                const button = document.createElement('button');
                button.textContent = name;
                button.className = `py-2 px-4 rounded-md font-semibold border focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150 bg-white text-gray-700 border-gray-300 hover:bg-gray-100`;

                button.addEventListener('click', () => {
                    document.querySelectorAll('#district-tabs-container button').forEach(btn => {
                        btn.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
                        btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                    });
                    
                    button.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100');
                    button.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
                    
                    const groupsForDistrict = dataMap[name];
                    setupGroupTabs(groupsForDistrict);
                    
                    const firstGroupButton = document.querySelector('#tabs-container button');
                    if (firstGroupButton) {
                        firstGroupButton.click();
                    } else {
                        renderGroupData(null);
                    }
                });
                districtTabsContainer.appendChild(button);
            });
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            
            function initializeApp(rawData, groupInfoData) {
                document.getElementById('loading-container').style.display = 'none';
                document.getElementById('app-container').classList.remove('hidden');

                transportData = processRawData(rawData);
                groupChangeInfo = (groupInfoData && groupInfoData.length > 0) ? groupInfoData : [];
                
                transportData.forEach(item => {
                    if (!dataMap[item.district]) {
                        dataMap[item.district] = [];
                    }
                    if (!dataMap[item.district].includes(item.groupName)) {
                        dataMap[item.district].push(item.groupName);
                    }
                });
                
                setupDistrictTabs();

                const firstDistrictTab = document.querySelector('#district-tabs-container button');
                if (firstDistrictTab) {
                    firstDistrictTab.click();
                } else {
                     console.warn("No district tabs were created to initialize the application.");
                     setupGroupTabs(null);
                     renderGroupData(null);
                }
    
                document.getElementById('selectAllBtn').addEventListener('click', () => {
                    if (currentChart) {
                        const groupName = document.getElementById('groupTitle').textContent.replace('ניתוח קבוצת ', '');
                        const groupData = transportData.filter(d => d.groupName === groupName);

                        currentChart.data.datasets.forEach((dataset, index) => {
                           currentChart.setDatasetVisibility(index, true);
                        });
                        currentChart.update();
                        
                        displayRidershipSummary(groupData);
                        populateKmTable(groupData);
                        displayRatioSummary(groupData);
                        const lastLabel = currentChart.data.labels[currentChart.data.labels.length - 1];
                        populateCustomLegend(currentChart, lastLabel, groupData);
                    }
                });
    
                document.getElementById('clearAllBtn').addEventListener('click', () => {
                    if (currentChart) {
                        const groupName = document.getElementById('groupTitle').textContent.replace('ניתוח קבוצת ', '');
                        const groupData = transportData.filter(d => d.groupName === groupName);

                        currentChart.data.datasets.forEach((dataset, index) => {
                             currentChart.setDatasetVisibility(index, false);
                        });
                        currentChart.update();

                        displayRidershipSummary([]);
                        populateKmTable([]);
                        displayRatioSummary([]);
                        const lastLabel = currentChart.data.labels[currentChart.data.labels.length - 1];
                        populateCustomLegend(currentChart, lastLabel, groupData);
                    }
                });
                
                document.getElementById('exportCsvBtn').addEventListener('click', () => {
                    if (currentChart) {
                        const groupName = document.getElementById('groupTitle').textContent.replace('ניתוח קבוצת ', '');
                        exportToCsv(`${groupName}_ridership_data.csv`, currentChart);
                    }
                });
                
                let searchTimeout;
                document.getElementById('search-input').addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    const searchResultsContainer = document.getElementById('search-results');
                    
                    clearTimeout(searchTimeout);
                    if (searchTerm.length < 2) {
                        searchResultsContainer.innerHTML = '';
                        searchResultsContainer.classList.add('hidden');
                        return;
                    }

                    searchTimeout = setTimeout(() => {
                        const allGroups = Object.values(dataMap).flat();
                        const uniqueGroups = [...new Set(allGroups)];
                        
                        const results = uniqueGroups.filter(groupName => groupName.toLowerCase().includes(searchTerm));
                        
                        searchResultsContainer.innerHTML = '';
                        if (results.length > 0) {
                            searchResultsContainer.classList.remove('hidden');
                            results.forEach(result => {
                                const resultItem = document.createElement('div');
                                resultItem.textContent = result;
                                resultItem.className = 'p-2 hover:bg-gray-100 cursor-pointer';
                                resultItem.onclick = () => {
                                    const foundGroup = transportData.find(line => line.groupName === result);
                                    if(foundGroup) {
                                        const districtButton = Array.from(document.querySelectorAll('#district-tabs-container button')).find(btn => btn.textContent === foundGroup.district);
                                        if (districtButton) {
                                            districtButton.click();
                                            setTimeout(() => {
                                                const groupButton = Array.from(document.querySelectorAll('#tabs-container button')).find(btn => btn.textContent === foundGroup.groupName);
                                                if (groupButton) {
                                                    groupButton.click();
                                                }
                                            }, 50);
                                        }
                                    }
                                    document.getElementById('search-input').value = '';
                                    searchResultsContainer.classList.add('hidden');
                                };
                                searchResultsContainer.appendChild(resultItem);
                            });
                        } else {
                            searchResultsContainer.classList.add('hidden');
                        }
                    }, 300);
                });
            }

            function exportToCsv(filename, chart) {
                const headers = ['תקופה', ...chart.data.datasets.map(ds => `"${ds.label.replace(/"/g, '""')}"`)].join(',');

                const rows = chart.data.labels.map((label, index) => {
                    const row = [`"${label}"`];
                    chart.data.datasets.forEach(dataset => {
                        row.push(dataset.data[index] || 0);
                    });
                    return row.join(',');
                });

                const csvContent = [headers, ...rows].join('\n');
                
                const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement("a");
                
                if (link.download !== undefined) {
                    const url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", filename);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            }
            
            const dataUrl = `https://raw.githubusercontent.com/amirvigo-lab/israel-bus-transit-changes/main/data.json?timestamp=${new Date().getTime()}`;
            const groupInfoUrl = `https://raw.githubusercontent.com/amirvigo-lab/israel-bus-transit-changes/main/groupinfo.json?timestamp=${new Date().getTime()}`;

            Promise.all([
                fetch(dataUrl).then(res => {
                    if (!res.ok) throw new Error(`Failed to fetch data.json: ${res.status}`);
                    return res.json();
                }),
                fetch(groupInfoUrl).then(res => {
                    if (!res.ok) { 
                        console.warn(`Failed to fetch groupinfo.json: ${res.status}. Returning empty array.`);
                        return []; // Return empty array on failure
                    }
                    return res.json();
                }).catch(e => {
                    console.warn(`Error fetching or parsing groupinfo.json: ${e}. Returning empty array.`);
                    return []; // Return empty array on error
                })
            ])
            .then(([rawData, groupInfoData]) => {
                initializeApp(rawData, groupInfoData);
            })
            .catch(error => {
                console.error("Failed to load critical data from GitHub:", error);
                const loadingContainer = document.getElementById('loading-container');
                loadingContainer.innerHTML = `<p class="text-red-500 font-bold">שגיאה: טעינת הנתונים נכשלה. אנא ודא שהקובץ data.json ב-GitHub תקין וזמין.</p>`;
            });
        });
    </script>
</body>
</html>

